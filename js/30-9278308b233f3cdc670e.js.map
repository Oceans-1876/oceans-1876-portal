{"version":3,"sources":["webpack://oceans-1876-portal/./src/components/Map/Control.ts","webpack://oceans-1876-portal/./src/files/species.json","webpack://oceans-1876-portal/./src/files/stations.geojson","webpack://oceans-1876-portal/./src/components/Explore/index.tsx"],"names":["MapControl","container","this","_container","map","classList","add","remove","parentNode","removeChild","undefined","maplibre","MAPBOX_TOKEN","useStyle","makeStyles","theme","main","height","margin","mapContainer","width","sidebar","background","padding","spacing","searchInput","marginLeft","flex","stationCloseButton","position","top","right","zIndex","classes","mapContainerRef","React","mapRef","sidebarRef","allSpecies","updateAllSpecies","selectedSpecies","updateSelectedSpecies","selectedStation","updateSelectedStation","current","style","center","zoom","on","addSource","type","data","stationsGeoJSON","addLayer","id","source","paint","filter","e","features","stationProperties","properties","setFilter","station_id","getCanvas","cursor","addControl","axios","speciesJSON","then","console","error","loaded","sp","Grid","className","item","xs","justify","alignContent","ref","Autocomplete","multiple","disableCloseOnSelect","includeInputInList","fullWidth","limitTags","ChipProps","size","options","value","renderInput","params","TextField","placeholder","onChange","_e","selectedOptions","Fab","color","onClick","Close","List","ListItem","station","name","air_temperature_noon","air_temperature_daily_mean","water_temperature_bottom","water_temperature_surface","water_density_bottom_60f","water_density_surface_60f","JSON","parse","species","key"],"mappings":"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","file":"js/30-9278308b233f3cdc670e.js","sourcesContent":["import maplibre from 'maplibre-gl';\n\nexport class MapControl implements maplibre.IControl {\n    map: maplibre.Map | undefined;\n\n    _container: HTMLElement;\n\n    constructor(container: HTMLElement) {\n        this._container = container;\n    }\n\n    onAdd(map: maplibre.Map): HTMLElement {\n        this.map = map;\n        this._container.classList.add('mapboxgl-ctrl');\n        this._container.classList.remove('hidden');\n        return this._container;\n    }\n\n    onRemove(): void {\n        this._container.parentNode?.removeChild(this._container);\n        this.map = undefined;\n    }\n}\n","export default __webpack_public_path__ + \"files/species-b9453670dfdf3bcf944b063b7c2e23d8.json\";","export default __webpack_public_path__ + \"files/stations-755bab1956f483b2d97b992733dbdcb2.geojson\";","import React from 'react';\nimport axios from 'axios';\nimport maplibre from 'maplibre-gl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { MapControl } from '../Map/Control';\n\nimport speciesJSON from '../../files/species.json';\nimport stationsGeoJSON from '../../files/stations.geojson';\n\nmaplibre.accessToken = MAPBOX_TOKEN || '';\n\nconst useStyle = makeStyles((theme) => ({\n    main: {\n        height: '100%',\n        margin: 0\n    },\n    mapContainer: {\n        width: '100%',\n        height: '100%'\n    },\n    sidebar: {\n        background: '#fff',\n        width: 350,\n        padding: theme.spacing(1)\n    },\n    searchInput: {\n        marginLeft: theme.spacing(1),\n        flex: 1\n    },\n    stationCloseButton: {\n        position: 'absolute',\n        top: 50,\n        right: 20,\n        zIndex: 10\n    }\n}));\n\ninterface StationProperties {\n    station_id: number;\n    station: string;\n    name: string;\n    species: string;\n    date: string;\n    air_temperature_noon: number;\n    air_temperature_daily_mean: number;\n    water_temperature_bottom: number;\n    water_temperature_surface: number;\n    water_density_bottom_60f: number;\n    water_density_surface_60f: number;\n}\n\nconst Explore = (): JSX.Element => {\n    const classes = useStyle();\n\n    const mapContainerRef = React.useRef<HTMLDivElement>(null);\n    const mapRef = React.useRef<maplibre.Map>();\n\n    const sidebarRef = React.useRef<HTMLDivElement>(null);\n\n    const [allSpecies, updateAllSpecies] = React.useState<string[]>([]);\n    const [selectedSpecies, updateSelectedSpecies] = React.useState<string[]>([]);\n\n    const [selectedStation, updateSelectedStation] = React.useState<StationProperties>();\n\n    React.useEffect(() => {\n        if (mapContainerRef.current && maplibre.accessToken) {\n            const map = new maplibre.Map({\n                container: mapContainerRef.current,\n                style: 'mapbox://styles/mapbox/streets-v11',\n                center: [0, 0],\n                zoom: 1\n            });\n            map.on('load', () => {\n                map.addSource('stations', {\n                    type: 'geojson',\n                    data: stationsGeoJSON\n                });\n                map.addLayer({\n                    id: 'stations',\n                    type: 'circle',\n                    source: 'stations',\n                    paint: {\n                        'circle-color': '#088'\n                    }\n                });\n\n                map.addLayer({\n                    id: 'selected-station',\n                    type: 'circle',\n                    source: 'stations',\n                    paint: {\n                        'circle-radius': 10,\n                        'circle-color': 'red',\n                        'circle-opacity': 0.5\n                    },\n                    filter: ['==', 'station_id', '']\n                });\n\n                map.on('click', 'stations', (e) => {\n                    if (e.features && e.features[0]) {\n                        const stationProperties = e.features[0].properties as StationProperties;\n                        updateSelectedStation(stationProperties);\n                        map.setFilter('selected-station', ['==', 'station_id', stationProperties.station_id]);\n                    }\n                });\n\n                // Change the cursor to a pointer when the mouse is over the states layer.\n                map.on('mouseenter', 'stations', () => {\n                    map.getCanvas().style.cursor = 'pointer';\n                });\n\n                // Change it back to a pointer when it leaves.\n                map.on('mouseleave', 'stations', () => {\n                    map.getCanvas().style.cursor = '';\n                });\n\n                if (sidebarRef.current) {\n                    map.addControl(new MapControl(sidebarRef.current), 'top-left');\n                }\n            });\n            mapRef.current = map;\n        }\n    }, []);\n\n    React.useEffect(() => {\n        axios\n            .get(speciesJSON)\n            .then(({ data }) => {\n                updateAllSpecies(data);\n            })\n            .catch(console.error);\n    }, []);\n\n    React.useEffect(() => {\n        const map = mapRef.current;\n        if (map && map.loaded()) {\n            map.setFilter('stations', ['any', ...selectedSpecies.map((sp) => ['in', sp, ['get', 'species']])]);\n        }\n    }, [selectedSpecies]);\n\n    return (\n        <Grid className={classes.main} container item xs={12} justify=\"center\" alignContent=\"space-around\" spacing={5}>\n            <div className={classes.mapContainer} ref={mapContainerRef} />\n            <Grid className={`hidden ${classes.sidebar}`} ref={sidebarRef}>\n                <Grid item>\n                    <Autocomplete\n                        multiple\n                        disableCloseOnSelect\n                        includeInputInList\n                        fullWidth\n                        limitTags={2}\n                        ChipProps={{\n                            size: 'small'\n                        }}\n                        options={allSpecies}\n                        value={selectedSpecies}\n                        renderInput={(params) => <TextField {...params} placeholder=\"Select species\" />}\n                        onChange={(_e, selectedOptions) => {\n                            updateSelectedSpecies(selectedOptions);\n                        }}\n                    />\n                </Grid>\n                {selectedStation ? (\n                    <Grid item>\n                        <Fab\n                            className={classes.stationCloseButton}\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={() => {\n                                mapRef.current?.setFilter('selected-station', ['==', 'station_id', '']);\n                                updateSelectedStation(undefined);\n                            }}\n                        >\n                            <CloseIcon />\n                        </Fab>\n                        <List>\n                            <ListItem>\n                                {selectedStation.station} - {selectedStation.name}\n                            </ListItem>\n                            <ListItem>Air temperature (noon): {selectedStation.air_temperature_noon}&deg;</ListItem>\n                            <ListItem>\n                                Air temperature (daily mean): ${selectedStation.air_temperature_daily_mean}&deg;\n                            </ListItem>\n                            <ListItem>\n                                Water temperature (bottom): ${selectedStation.water_temperature_bottom}&deg;\n                            </ListItem>\n                            <ListItem>\n                                Water temperature (surface): ${selectedStation.water_temperature_surface}&deg;\n                            </ListItem>\n                            <ListItem>\n                                Water density (bottom - 60F): ${selectedStation.water_density_bottom_60f}&deg;\n                            </ListItem>\n                            <ListItem>\n                                Water density (surface - 60F): ${selectedStation.water_density_surface_60f}&deg;\n                            </ListItem>\n                            <ListItem>\n                                Species:&nbsp;\n                                <List>\n                                    {JSON.parse(selectedStation.species).map((sp: string) => (\n                                        <ListItem key={sp}>{sp}</ListItem>\n                                    ))}\n                                </List>\n                            </ListItem>\n                        </List>\n                    </Grid>\n                ) : null}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Explore;\n"],"sourceRoot":""}